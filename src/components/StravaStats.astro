---
// https://www.strava.com/api/v3/athletes/158501259/stats
const STRAVA_ATHLETE_ID = import.meta.env.STRAVA_ATHLETE_ID;
const STRAVA_CLIENT_ID = import.meta.env.STRAVA_CLIENT_ID;
const STRAVA_CLIENT_SECRET = import.meta.env.STRAVA_CLIENT_SECRET;
const STRAVA_REFRESH_TOKEN = import.meta.env.STRAVA_REFRESH_TOKEN;

// Get the start of the current year in Unix timestamp (seconds)
const startOfYear = Math.floor(
  new Date(new Date().getFullYear(), 0, 1).getTime() / 1000,
);

async function getStravaToken() {
  const response = await fetch("https://www.strava.com/oauth/token", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      client_id: STRAVA_CLIENT_ID,
      client_secret: STRAVA_CLIENT_SECRET,
      refresh_token: STRAVA_REFRESH_TOKEN,
      grant_type: "refresh_token",
    }),
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(
      `Failed to refresh Strava token: ${JSON.stringify(errorData)}`,
    );
  }

  return response.json();
}

async function getStravaStats() {
  const { access_token } = await getStravaToken();

  const response = await fetch(
    `https://www.strava.com/api/v3/athletes/${STRAVA_ATHLETE_ID}/stats`,
    {
      headers: {
        Authorization: `Bearer ${access_token}`,
      },
    },
  );

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(
      `Failed to fetch Strava stats: ${JSON.stringify(errorData)}`,
    );
  }

  return response.json();
}

let stats;
try {
  stats = await getStravaStats();
} catch (error) {
  console.error("Error fetching Strava data:", error.message);
  stats = null;
}

const movingTime = stats?.ytd_ride_totals?.moving_time; // in seconds
const movingTimeInHours = Math.round(movingTime / 3600);

const distance = stats?.ytd_ride_totals?.distance; // in meters
const distanceInKm = Math.round(distance / 1000);

const currentYear = new Date().getFullYear();

// Randomly choose between hours and kilometers
const randomChoice = Math.random() < 0.5;
const value = randomChoice ? movingTimeInHours : distanceInKm;
const label = randomChoice
  ? `Horas de bici en ${currentYear}`
  : `KilÃ³metros en bici en ${currentYear}`;
---

{
  stats && (movingTimeInHours > 0 || distanceInKm > 0) ? (
    <div class="flex flex-col-reverse gap-y-4">
      <dt class="text-base leading-7 text-gray-600">{label}</dt>
      <dd class="text-5xl font-semibold tracking-tight text-gray-900">
        +{" "}
        <span data-value={value} id="strava-biking-stats">
          {value}
        </span>
      </dd>
    </div>
  ) : null
}
